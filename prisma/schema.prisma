generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
    id            String          @id @default(cuid())
    name          String?
    email         String          @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    // Optional for WebAuthn support
    Authenticator Authenticator[]
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt
    User_Project  User_Project[]
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
    credentialID         String  @unique
    userId               String
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?
    user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([userId, credentialID])
}

model User_Project {
    userId    String
    User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    projectId String
    Project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    createdBy String

    @@id([userId, projectId])
}

model Project {
    id                    String                  @id @default(cuid())
    label                 String
    description           String?
    slug                  String                  @unique
    createdAt             DateTime                @default(now())
    updatedAt             DateTime                @updatedAt
    createdBy             String
    isArchived            Boolean                 @default(false)
    softwareLabel         String
    Software              Software                @relation(fields: [softwareLabel], references: [label])
    User_Project          User_Project[]
    Dsn                   Dsn[]
    Society               Society[]
    Establishement        Establishment[]
    Job                   Job[]
    Idcc                  Idcc[]
    Person                Person[]
    WorkContract          WorkContract[]
    Transco_Society       Transco_Society[]
    Transco_Establishment Transco_Establishment[]
    Transco_Person        Transco_Person[]
    Transco_WorkContract  Transco_WorkContract[]
    Transco_Job           Transco_Job[]
    Logger                Logger[]
    Project_File          Project_File[]
    Project_Column        Project_Column[]
    Project_Row           Project_Row[]
    Extraction            Extraction[]
    Extraction_Data       Extraction_Data[]
    Dsn_Value_Exist       Dsn_Value_Exist[]
    Extraction_File       Extraction_File[]
}

model Software {
    label           String            @id
    provider        String
    isArchived      Boolean           @default(false)
    slug            String            @unique
    createdAt       DateTime          @default(now())
    updatedAt       DateTime          @updatedAt
    createdBy       String            @default("system")
    Project         Project[]
    File            File[]
    Extraction_Data Extraction_Data[]
}

model Iterator {
    label                   String                    @id
    description             String?
    createdAt               DateTime                  @default(now())
    updatedAt               DateTime                  @updatedAt
    createdBy               String                    @default("system")
    File                    File[]
    Project_File            Project_File[]
    Iterator_Standard_Field Iterator_Standard_Field[]
}

model Iterator_Standard_Field {
    iteratorLabel String
    Iterator      Iterator       @relation(fields: [iteratorLabel], references: [label])
    fieldLabel    String
    Field         Standard_Field @relation(fields: [fieldLabel], references: [label])
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    createdBy     String         @default("system")

    @@id([iteratorLabel, fieldLabel])
}

model Standard_Field {
    table                   String
    field                   String
    type                    String
    label                   String                    @id
    min                     Int?
    max                     Int?
    minLength               Int?
    maxLength               Int?
    format                  String?
    Format                  Format?                   @relation(fields: [type, format], references: [type, format])
    createdAt               DateTime                  @default(now())
    updatedAt               DateTime                  @updatedAt
    createdBy               String                    @default("system")
    Iterator_Standard_Field Iterator_Standard_Field[]
    Column                  Column[]
    Project_Column          Project_Column[]
}

model File {
    label         String
    softwareLabel String
    Software      Software       @relation(fields: [softwareLabel], references: [label])
    description   String?
    fileFormat    String         @default("csv")
    separator     String         @default(";")
    maxRows       Int            @default(99999)
    slug          String         @unique
    iteratorLabel String
    history       Boolean        @default(false)
    Iterator      Iterator       @relation(fields: [iteratorLabel], references: [label])
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    createdBy     String         @default("system")
    Column        Column[]
    Project_File  Project_File[]

    @@id([label, softwareLabel])
}

model Project_File {
    projectId       String
    Project         Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
    fileLabel       String
    softwareLabel   String
    fileFormat      String
    separator       String
    iteratorLabel   String
    history         Boolean           @default(false)
    Iterator        Iterator          @relation(fields: [iteratorLabel], references: [label])
    File            File              @relation(fields: [fileLabel, softwareLabel], references: [label, softwareLabel], onDelete: Cascade)
    createdAt       DateTime          @default(now())
    updatedAt       DateTime          @updatedAt
    createdBy       String
    slug            String            @unique @default(cuid())
    Extraction_File Extraction_File[]

    @@id([projectId, fileLabel, softwareLabel])
}

model Column {
    fileLabel          String
    softwareLabel      String
    File               File             @relation(fields: [fileLabel, softwareLabel], references: [label, softwareLabel], onDelete: Cascade)
    label              String
    slug               String           @unique
    description        String?
    createdAt          DateTime         @default(now())
    updatedAt          DateTime         @updatedAt
    createdBy          String           @default("system")
    type               String
    Format             Format?          @relation(fields: [type, format], references: [type, format])
    standardFieldLabel String?
    Standard_Field     Standard_Field?  @relation(fields: [standardFieldLabel], references: [label])
    order              Int
    min                Int?
    max                Int?
    minLength          Int?
    maxLength          Int?
    format             String?
    isRequired         Boolean          @default(false)
    defaultValue       String?
    Row                Row[]
    Project_Column     Project_Column[]

    @@id([fileLabel, softwareLabel, label])
    @@unique([fileLabel, softwareLabel, order])
}

model Project_Column {
    projectId          String
    Project            Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
    fileLabel          String
    label              String
    softwareLabel      String
    columnLabel        String
    type               String
    Format             Format?         @relation(fields: [type, format], references: [type, format])
    format             String?
    standardFieldLabel String?
    Standard_Field     Standard_Field? @relation(fields: [standardFieldLabel], references: [label])
    min                Int?
    max                Int?
    minLength          Int?
    maxLength          Int?
    defaultValue       String?
    isRequired         Boolean         @default(false)
    order              Int             @default(1)
    Column             Column          @relation(fields: [fileLabel, softwareLabel, columnLabel], references: [fileLabel, softwareLabel, label], onDelete: Cascade)
    createdAt          DateTime        @default(now())
    updatedAt          DateTime        @updatedAt
    createdBy          String
    slug               String          @unique @default(cuid())

    @@id([projectId, softwareLabel, fileLabel, columnLabel])
    @@unique([projectId, softwareLabel, fileLabel, order])
}

model Row {
    fileLabel     String
    softwareLabel String
    columnLabel   String
    order         Int           @default(1)
    Column        Column        @relation(fields: [fileLabel, softwareLabel, columnLabel], references: [fileLabel, softwareLabel, label], onDelete: Cascade)
    value         String
    slug          String        @unique
    description   String?
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt
    createdBy     String        @default("system")
    Project_Row   Project_Row[]

    @@id([softwareLabel, fileLabel, columnLabel, order])
}

model Project_Row {
    projectId     String
    Project       Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    Row           Row      @relation(fields: [fileLabel, softwareLabel, columnLabel, order], references: [fileLabel, softwareLabel, columnLabel, order], onDelete: Cascade)
    fileLabel     String
    softwareLabel String
    columnLabel   String
    order         Int
    value         String
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
    createdBy     String
    slug          String   @unique @default(cuid())

    @@id([projectId, softwareLabel, fileLabel, columnLabel, order])
}

model Prisma_Seed {
    name          String   @id
    description   String
    order         Int
    status        String
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
    createdBy     String
    previousLabel String
    error         String?
}

model Logger {
    id        String   @id @default(cuid())
    level     String
    message   String
    projectId String?
    Project   Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    createdBy String
}

model Dsn {
    id              String            @id @default(cuid())
    month           String
    dsnVersion      String
    provider        String
    softwareName    String
    softwareVersion String
    totalRows       String
    type            String
    createdAt       DateTime          @default(now())
    updatedAt       DateTime          @updatedAt
    createdBy       String
    projectId       String
    Project         Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
    Society         Society[]
    Job             Job[]
    Idcc            Idcc[]
    Person          Person[]
    WorkContract    WorkContract[]
    Establishment   Establishment[]
    Dsn_Value_Exist Dsn_Value_Exist[]
}

model Society {
    dsnId          String
    Dsn            Dsn             @relation(fields: [dsnId], references: [id], onDelete: Cascade)
    siren          String
    apen           String
    zipCode        String
    city           String
    projectId      String
    Project        Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
    Establishement Establishment[]
    createdAt      DateTime        @default(now())
    updatedAt      DateTime        @updatedAt
    createdBy      String

    @@id([dsnId, siren])
}

model Transco_Society {
    projectId String
    Project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    siren     String
    newId     String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    createdBy String
    slug      String   @unique @default(cuid())

    @@id([projectId, siren])
    @@unique([projectId, newId])
}

model Establishment {
    siren        String
    nic          String
    ape          String
    postalCode   String
    city         String
    legalStatus  String
    projectId    String
    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @updatedAt
    createdBy    String
    dsnId        String
    DSN          Dsn            @relation(fields: [dsnId], references: [id], onDelete: Cascade)
    Project      Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
    Society      Society        @relation(fields: [dsnId, siren], references: [dsnId, siren], onDelete: Cascade)
    Person       Person[]
    WorkContract WorkContract[]

    @@id([dsnId, siren, nic])
}

model Transco_Establishment {
    projectId String
    Project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    siren     String
    nic       String
    newId     String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    createdBy String
    slug      String   @unique @default(cuid())

    @@id([projectId, siren, nic])
    @@unique([projectId, newId])
}

model Person {
    projectId     String
    dsnId         String
    siren         String
    nic           String
    DSN           Dsn            @relation(fields: [dsnId], references: [id], onDelete: Cascade)
    Project       Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
    Establishment Establishment  @relation(fields: [dsnId, siren, nic], references: [dsnId, siren, nic], onDelete: Cascade)
    numSS         String
    lastname      String
    surname       String
    firstname     String
    sex           String
    birthday      String
    placeOfBith   String
    address1      String
    codeZip       String
    city          String
    country       String         @default("FR")
    codeZipBith   String
    countryBirth  String
    address2      String?
    address3      String?
    email         String?
    employeeId    String         @default("Pas de matricule")
    graduate      String?
    studies       String?
    date          String?
    ntt           String?
    updatedAt     DateTime       @updatedAt
    createdAt     DateTime       @default(now())
    createdBy     String
    WorkContract  WorkContract[]

    @@id([dsnId, numSS])
}

model Transco_Person {
    projectId String
    Project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    siret     String
    numSS     String
    lastname  String
    firstname String
    oldId     String
    newId     String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    createdBy String
    slug      String   @unique @default(cuid())

    @@id([projectId, numSS])
    @@unique([projectId, newId])
}

model WorkContract {
    numSS                       String
    dsnId                       String
    contractId                  String
    projectId                   String
    siren                       String
    nic                         String
    Establishment               Establishment @relation(fields: [dsnId, siren, nic], references: [dsnId, siren, nic], onDelete: Cascade)
    startDate                   DateTime
    status                      String
    retirement                  String
    pcs                         String
    pcsBis                      String?
    mal                         String
    employmentLabel             String
    contract                    String
    publicDispPolitic           String
    contractEndDate             DateTime
    DNACodeUnitTime             String
    DSNWorkQuotaEstablishment   String
    DSNWorkQuotaWorkContract    String
    workTime                    String
    ss                          String
    idcc                        String
    estabWorkPlace              String
    vieillesse                  String
    pattern                     String?
    vacation                    String?
    rateProfessionalFess        String?
    foreigner                   String
    exclusionDsn                String?
    statusEmployment            String?
    unemployment                String?
    idPublicEmployer            String?
    methodUnemployment          String?
    joiningDate                 DateTime?
    denunciationDate            DateTime?
    dateManagementAgreement     DateTime?
    idAgreement                 String?
    healthRiskDelegate          String?
    multipleJobCode             String
    multipleEmployerCode        String
    workAccidentRisk            String
    idWorkAccidentRisk          String
    positionCollectiveAgreement String?
    apecita                     String?
    rateAt                      String
    contributingFullTime        String?
    tip                         String?
    useEstablishmentId          String?
    livePerfomances             String?
    licences                    String?
    showId                      String?
    showrunner                  String?
    fpPcsfpPcs                  String?
    typePosition                String?
    fpQuotite                   String?
    partTimeWork                String?
    serviceCode                 String?
    fpIndice                    String?
    fpIndiceMaj                 String?
    NBI                         String?
    indiceOriginal              String?
    article15                   String?
    oldEstablishmentId          String?
    oldIndice                   String?
    SPP                         String?
    contractualHours            String?
    secondment                  String?
    browsing                    String?
    activityDutyRate            String?
    payLevel                    String?
    echelon                     String?
    coefficient                 String?
    boeth                       String?
    addPublicPolicy             String?
    arrangement                 String?
    finaly                      String?
    navy                        String?
    navyCode                    String?
    activityRate                String?
    grade                       String?
    cti                         String?
    finess                      String?
    dateStart                   DateTime?
    Project                     Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
    Dsn                         Dsn           @relation(fields: [dsnId], references: [id], onDelete: Cascade)
    Person                      Person        @relation(fields: [dsnId, numSS], references: [dsnId, numSS], onDelete: Cascade)
    updatedAt                   DateTime      @updatedAt
    createdAt                   DateTime      @default(now())
    createdBy                   String

    @@id([dsnId, numSS, contractId])
}

model Transco_WorkContract {
    projectId  String
    Project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    siren      String
    nic        String
    siret      String
    numSS      String
    firstname  String
    lastname   String
    contractId String
    employeeId String
    newId      String?
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    createdBy  String
    slug       String   @unique @default(cuid())

    @@id([projectId, numSS, contractId])
    @@unique([projectId, siren, newId])
    @@unique([projectId, numSS, contractId])
}

model Job {
    id               String   @id @default(cuid())
    dsnId            String
    projectId        String
    Project          Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    Dsn              Dsn      @relation(fields: [dsnId], references: [id], onDelete: Cascade)
    employementLabel String
    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt
    createdBy        String
}

model Transco_Job {
    projectId        String
    Project          Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    employementLabel String
    newId            String?
    newLabel         String?
    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt
    createdBy        String
    slug             String   @unique @default(cuid())

    @@id([projectId, employementLabel])
}

model Idcc {
    id        String   @id @default(cuid())
    idcc      String
    dsnId     String
    projectId String
    Project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    Dsn       Dsn      @relation(fields: [dsnId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    createdBy String
}

model Extraction {
    label           String
    description     String?
    projectId       String
    Project         Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
    status          String
    createdAt       DateTime          @default(now())
    updatedAt       DateTime          @updatedAt
    createdBy       String
    slug            String            @unique
    Extraction_File Extraction_File[]

    @@id([label, projectId])
}

model Extraction_File {
    extractionLabel String
    Extraction      Extraction        @relation(fields: [extractionLabel, projectId], references: [label, projectId], onDelete: Cascade)
    fileLabel       String
    projectId       String
    Project         Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
    createdAt       DateTime          @default(now())
    updatedAt       DateTime          @updatedAt
    createdBy       String
    slug            String            @unique @default(cuid())
    status          String            @default("En attente")
    iteratorLabel   String
    projectFileSlug String
    Project_File    Project_File      @relation(fields: [projectFileSlug], references: [slug])
    Extraction_Data Extraction_Data[]

    @@id([extractionLabel, fileLabel, projectId])
}

model Extraction_Data {
    projectId       String
    Project         Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
    extractionLabel String
    Extraction_File Extraction_File @relation(fields: [extractionLabel, fileLabel, projectId], references: [extractionLabel, fileLabel, projectId], onDelete: Cascade)
    fileLabel       String
    columnLabel     String
    columnValue     String
    rowOrder        Int
    createdAt       DateTime        @default(now())
    updatedAt       DateTime        @updatedAt
    createdBy       String
    softwareLabel   String
    Software        Software        @relation(fields: [softwareLabel], references: [label])
    slug            String          @unique @default(cuid())

    @@id([projectId, extractionLabel, fileLabel, columnLabel, rowOrder])
}

model Dsn_Value_Exist {
    dsnId      String
    Dsn        Dsn      @relation(fields: [dsnId], references: [id], onDelete: Cascade)
    projectId  String
    Project    Project  @relation(fields: [projectId], references: [id])
    dsnMonth   String
    value      String
    table      String
    fieldLabel String
    exist      Boolean
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    createdBy  String   @default("system")

    @@id([dsnId, projectId, value])
}

model Format {
    type           String
    format         String
    createdAt      DateTime         @default(now())
    updatedAt      DateTime         @updatedAt
    createdBy      String           @default("system")
    Standard_Field Standard_Field[]
    Column         Column[]
    Project_Column Project_Column[]

    @@id([type, format])
}
