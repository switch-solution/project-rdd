generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
    id            String          @id @default(cuid())
    name          String?
    email         String          @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    // Optional for WebAuthn support
    Authenticator Authenticator[]
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt
    User_Project  User_Project[]
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
    credentialID         String  @unique
    userId               String
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?
    user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([userId, credentialID])
}

model User_Project {
    userId    String
    User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    projectId String
    Project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    createdBy String

    @@id([userId, projectId])
}

model Project {
    id            String         @id @default(cuid())
    label         String
    description   String?
    slug          String         @unique
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    createdBy     String
    isArchived    Boolean        @default(false)
    softwareLabel String
    Software      Software       @relation(fields: [softwareLabel], references: [label])
    User_Project  User_Project[]
}

model Software {
    label      String    @id
    provider   String
    isArchived Boolean   @default(false)
    slug       String    @unique
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
    createdBy  String    @default("system")
    Project    Project[]
}

model Prisma_Seed {
    name          String   @id
    description   String
    order         Int
    status        String
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
    createdBy     String
    previousLabel String
    error         String?
}

model Logger {
    id        String   @id @default(cuid())
    level     String
    message   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    createdBy String
}
